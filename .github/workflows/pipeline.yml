name: pipeline
on:
  pull_request:
    paths:
      - 'back-end/**'
      - 'front-end/**'
      - '.github/**'

  push:
    branches:
      - master
    paths:
      - 'back-end/**'
      - 'front-end/**'
      - '.github/**'

jobs:
  backend:
    runs-on: ubuntu-latest
    name: Back-End
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Linting Tools
        run: pip install flake8 black

      - name: Lint
        uses: reviewdog/action-flake8@v3
        with:
          github_token: '${{ secrets.GITHUB_TOKEN }}'
          workdir: 'back-end/'

      - name: Code Formatting
        run: black --check back-end/

      - name: Install Dependencies
        run: pip install -r back-end/requirements.txt

      - name: Install Test Dependencies
        run: pip install -r back-end/requirements_test.txt

      - name: Run Back-End Tests
        env:
          JWT_KEY: ${{ secrets.JWT_KEY }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        run: pytest -v back-end/test_app.py

  frontend:
    runs-on: ubuntu-latest
    name: Front-End
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Linting Tools
        run: pip install flake8 black

      - name: Lint
        uses: reviewdog/action-flake8@v3
        with:
          github_token: '${{ secrets.GITHUB_TOKEN }}'
          workdir: 'front-end/'

      - name: Code Formatting
        run: black --check front-end/

      - name: Install Dependencies
        run: pip install -r front-end/requirements.txt

      - name: Install Front-End Test Dependencies
        run: pip install -r front-end/requirements_test.txt

      - name: Run Front-End Tests
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: pytest -v front-end/test_app.py

  docker:
    runs-on: ubuntu-latest
    name: Build and Push Docker Image
    needs:
      - backend
      - frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build Docker Image
        run: docker build -t ghcr.io/${{ github.repository_owner }}/wuda-backend:latest ./back-end

      - name: Push Docker Image
        run: docker push ghcr.io/${{ github.repository_owner }}/wuda-backend:latest

      - name: Build Docker Image Front-End
        run: docker build -t ghcr.io/${{ github.repository_owner }}/wuda-frontend:latest ./front-end

      - name: Push Docker Image Front-End
        run: docker push ghcr.io/${{ github.repository_owner }}/wuda-frontend:latest

      - name: Make container packages public
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OWNER: ${{ github.repository_owner }}
        run: |
          for pkg in wuda-backend wuda-frontend; do
            echo "Setting visibility for $pkg..."
            curl -sS -X PUT \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/user/packages/container/$pkg/visibility" \
              -d '{"visibility":"public"}'
          done